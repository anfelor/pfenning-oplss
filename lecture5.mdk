[INCLUDE=style/acmart]

Extended    : False

Anon        : False
TechReport  : True
Logo        : False
Submit      : False
Todo        : True
Tight       : False

Title       : Adjoint Functional Programming
Title Note  : Lecture notes for Frank Pfennings course at OPLSS 2024
Short Title : &Title;

Bibliography    : pfenning.bib
Math Dpi        : 300
Math Concurrency: 8
xPackage         : trfrac
Package         : graphicx
Package         : tikz
Embed           : 1000

prelinecorrection: [\setlength\preadjust{0.1em}]{input:texraw}

.supplement {
  replace: "&source;"
}

.tronly {
  display:none;
}

@techreport .tronly {
  display:block;
}

@submit .supplement {
  replace: clear;
  replace: "&source; in the tech report"
}

.intro1 {
  display: none;
}

[INCLUDE=borrowing-style]
[INCLUDE=koka-style]
[INCLUDE=graphdefs]
[INCLUDE=graphlegend]


~ HtmlOnly
[TITLE]
~

~ begin abstract
These are the lecture notes for Frank Pfenning's lecture at OPLSS 2024.
&bigskip;
~ end abstract

~TexRaw
\author{Nicholas Coltharp}
\author{Anton Lorenzen}
\author{Wesley Nuzzo}
\author{Xiaotian Zhou}

\title{\mdtitle}
\maketitle
\def\shorttitle{\acmshorttitle}
~

~ tronly
~~ texraw
\makeatletter
\fancypagestyle{firstpagestyle}{%
  \fancyhf{}%
  \fancyfoot[C]{\small\thepage}%
}
\fancypagestyle{standardpagestyle}{%
  \fancyhf{}%
  \fancyfoot[C]{\small\thepage}%
}
\makeatother
\pagestyle{standardpagestyle}
~~
~

~ MathDefs
\newcommand{\gray}[1]{\colorbox{gainsboro}{\strut$#1$}}
\newcommand{\tr}[1]{\lfloor #1\rfloor}
\newcommand{\comm}{\mathbin{\triangleright}}

\newcommand\under[2]{\underset{\raisebox{2mm}{$\scriptstyle #2$}}{#1}}
\newcommand\inhx[2]{\under{#1}{\under{\uparrow}{#2}}}
\newcommand\synx[2]{\under{#1}{\under{\downarrow}{#2}}}
\newcommand\inh[1]{\under{#1}{\uparrow}}
\newcommand\syn[1]{\under{#1}{\downarrow}}
\newcommand\smallsquare{\mathbin{\vcenter{\hbox{\scalebox{0.7}{$\square$}}}}}
\newcommand\smallat{{\mkern 1mu\vcenter{\hbox{\scalebox{0.7}{@}}}\mkern-1mu}}
\newcommand{\up}[1]{\lceil #1\rceil}
~

&bignegskip;

&bignegskip;

&bignegskip;

# Lecture 5: Data Layout

Recap:

~ begin columns 
~ begin column { width:25%; }

Programs:

~ mathpre
P & \coloneqq @write c V
  & \mid @read c K
  & \mid @cut x P; Q
  & \mid @id a b
  & \mid @call f \overline{a}
~

~ end column
~ begin column { width:25%; }

Small Values:

~ mathpre
V & \coloneqq (a, b)
  & \mid ()
  & \mid k(a)
  & \mid <a>
~

~ end column
~ begin column { width:25%; }

Continuations:

~ mathpre
K & \coloneqq (x, y) => P
  & \mid () => P
  & \mid (l(x) => P_l)_{l \in L}
  & \mid <x>\,=> P
~

~ end column
~ begin column { width:25%; }

Types:

~ mathpre
A \times B
1
+\{l: A_l\}_{l \in L}
\downarrow A
~

~ end column
~ end columns

## Dynamics

In the style of SSOS.

~ mathpre
@cell a_1 V_1, @cell a_2 V_2, ..., @proc P_1, @proc P_2, ...
~

In substructural operational semantics, you write down:

~ mathpre
@proc (@cut x P(x); Q(x)) -> @cell a \boxempty; @proc(P(a)); @proc (Q(a))
@cell a \boxempty; @proc (@write a S) -> @cell a S
@cell a \boxempty; @cell b S; @proc (@id a b) -> @cell a S
~

We do not have to note down the things that stay the same,
this is more modular. In the third line, the cell `b` is de-allocated
since we assume that everything is linear here.

 - *Q:* Do we allow mutating cells that contain values already?
 - *A:* No, we only write to empty cells. We will discuss reuse later.

~ mathpre
@cell c S, @proc (@read c S') -> @proc (S \triangleright S')
(a, b) \triangleright ((x, y) => P(x, y)) = P(a, b)
() \triangleright (() => P) = P
k(a) \triangleright (l(x) => P_l(x))_{l \in L} = P_k(a)
<a> \triangleright (<x>\, => P(x)) = P(a)
~

 - *Q:* Why is this substructural?
 - *A:* Since you can read the rules in logical form, where $,$ is the linear conjunction
     and $->$ is a linear function arrow.

Let's consider functions:
~ infer
G, A |- B
----------------
G |- A -o B
~

How would we interpret this in the store rules?
~ infer
G, x : A |- P  :: (y : B)
----------------
G |- @write c ((x, y) => P) :: (c: A -o B)
~

The axiom for the usual left-rule of functions is:
~ infer
\quad
----------------
A, A -o B |- B
~

~ infer
\quad
----------------
a : A, c : A -o B |- @read c (a, b) :: (b : B)
~

We pass $(a,b)$ to the continuation in the cell $c$.
To achieve this, we say that a store variable is either
a value or a continuation:
~ mathpre
S \coloneqq V \mid K
~

We then change:

~ begin columns 
~ begin column { width:25%; }

~ mathpre
P & \coloneqq @write c S
  & \mid @read c S
  & \mid @cut x P; Q
  & \mid @id a b
  & \mid @call f \overline{a}
~

~ end column
~ begin column { width:25%; }

Small Values:

~ mathpre
V & \coloneqq (a, b)
  & \mid ()
  & \mid k(a)
  & \mid <a>
~

~ end column
~ begin column { width:25%; }

Continuations:

~ mathpre
K & \coloneqq (x, y) => P
  & \mid () => P
  & \mid (l(x) => P_l)_{l \in L}
  & \mid <x> => P
~

~ end column
~ begin column { width:25%; }

Types:

~ mathpre
A \times B, A -> B
1
+\{l: A_l\}_{l \in L}, \&\{l : A_l\}_{l \in L}
\downarrow A, \uparrow A
~

~ end column
~ end columns

Why do we not a have counter-part for $1$? Because it would be bottom.
It happens not to be too important, because it is not inhabited.

## Negatives

Logical rules for the lazy record:

~ begin columns 
~ begin column { width:40%; }

~ infer
G |- A \quad G |- B
----------------
G |- A \& B
~

~ end column
~ begin column { width:30%; }

~ infer
\quad
----------------
A \& B |- A
~

~ end column
~ begin column

~ infer
\quad
----------------
A \& B |- B
~

~ end column
~ end columns

Process rules:

~ infer
(\forall l \in L) \quad G |- P_l :: (x : A_l)
----------------
G |- @write c (l(x) => P_l(x)) :: (c : \&\{l : A_l\}_{l \in L})
~

~ infer
k \in L
----------------
c : \&\{l : A_l\}_{l \in L} |- @read c (k(a)) :: (a : A_k)
~

Remember: _Right rules write_.

### Reuse

How do we do reuse? One way: when we read from a cell, rather than deleting
it, but it on the other side with content $\boxempty$. Then we can reuse the
cell for another one of the same type. Using the same types, ensures that the
cells have the same size at runtime.

### No garbage

In the final configuration, we only have cells and no more processes.
There is no garbage, if everything can be reached from the final destination.
Non-linear things might still be around and could be unreachable.

Reference counting is not very compatible with parallelism, because there can
be contention when several threads access a reference count.
For this reason, we will stick with a more traditional garbage collector.

## Cuts and Snips

The data layout we have considered so far is quite pointer-intensive.
For example, $A \otimes (B \otimes C)$ would be laid out as two allocations,
but in practice it should be laid out as one allocation.
But this is hard to express logically.

How can we derive the associativity of $\otimes$?
It turns out that we need a cut rule somewhere:

~ mathpre
\underline{A, B |- A \otimes B \quad A \otimes B, C |- (A \otimes B) \otimes C}
\underline{A, B, C |- (A \otimes B) \otimes C}
\underline{A, B \otimes B |- (A \otimes B) \otimes C}
A \otimes (B \otimes C) |- (A \otimes B) \otimes C
~

So we can not have cut-elimination. So how can we recover?
Use _snips_ instead of cuts. We mark subformulas by an underline:

~ begin columns 
~ begin column { width:60%; }

~ infer
\quad
----------------
\underline{A}, \underline{B} |- A \otimes B
~

~ infer
\quad
----------------
\underline{A} |- A \oplus B
~

~ end column
~ begin column

~ infer
\quad
----------------
\cdot\, |- 1
~

~ infer
\quad
----------------
\underline{B} |- A \oplus B
~

~ end column
~ end columns

The snip rule is:

~ infer
D |- A \quad G, \underline{A} |- C
-----------------------------------
D, G |- C
~

Then, instead of allocating:

~ infer
\quad
----------------
a : \underline{A}, b : \underline{B} |- @write c (a, b) :: (c : A \otimes B)
~

... we can just write the addresses. This performs no computation at runtime:

~ infer
\quad
----------------
c.\pi_1 : A, c.\pi_2 : B |- @write c (\_, \_) :: (c : A \otimes B)
~

Snips correspond to address computation and cuts correspond to allocation.
When you have a subformula, then you can compute the address of the subformula.
For the application rule:

~ begin columns
~ begin column { width:60%; }

~ infer
\quad
----------------
\underline{A}, A -> B |- \underline{B}
~

~ end column
~ begin column

~ infer
\quad
----------------
A \& B |- \underline{A}
~

~ end column
~ end columns

This determines a calling convention for functions.
This happens to be a good way to represent lambdas.
This is currently unpublished, but supported in the compiler.

## SNAX backend

Continuing in the file from last lecture.

```
type list[m k] = +{nil: 1, cons: <std[k]> * <list[m k]>}

decl append (xs : list[m k]) (ys : list[m k]) : list[m k]
defn append xs ys = match xs with
     | 'nil => ys
     | 'cons(<x>, <xs> => 'cons(<x>, <append xs ys>)

inst append (xs : list[L U]) (ys : list[L U]) : list[L U]
```

The compiled code is (without reuse):

```
proc append/0 ($0 : list[L U]) (xs : list [L U]) (ys : list[L U]) =
  read xs =>
  | 'nil(_) =>
    read xs.nil () =>
    id:list[L U] $0 ys % : list[L U]
  | 'cons(_) =>
    read xs.cons (_, _) =>
    read xs.cons.pi1 <$1> =>
    read xs.cons.pi2 <$2> =>
    write $0.cons.pi1 <$1>
    cut $4:list[L U]
      call append/0 $4 $2 ys
    write $0.cons.pi2 <$4>
    write $0.cons (_,_)
    write $0 'cons(_)
```

With reuse:

```
proc append/0 ($0 : list[L U]) (xs : list [L U]) (ys : list[L U]) =
  read xs =>
  | 'nil(_) =>
    read xs.nil () =>
    id:list[L U] $0 ys % : list[L U]
  | 'cons(_) =>
    read xs.cons (_, _) =>
    read xs.cons.pi1 <$1> =>
    read xs.cons.pi2 <$2> =>
    write $0.cons.pi1 <$1>
    cut $4 = xs : list[L U] % reuse
      call append/0 $4 $2 ys
    write $0.cons.pi2 <$4>
    write $0.cons (_,_)
    write $0 'cons(_)
```

Notice that we do an unnecessary write before the cut,
since the element is already in the right place.
In future work, this will be eliminated.