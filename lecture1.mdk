[INCLUDE=style/acmart]

Extended    : False

Anon        : False
TechReport  : True
Logo        : False
Submit      : False
Todo        : True
Tight       : False

Title       : Adjoint Functional Programming
Title Note  : Lecture notes for Frank Pfennings course at OPLSS 2024
Short Title : &Title;

Bibliography    : pfenning.bib
Math Dpi        : 300
Math Concurrency: 8
xPackage         : trfrac
Package         : graphicx
Embed           : 1000

prelinecorrection: [\setlength\preadjust{0.1em}]{input:texraw}

.supplement {
  replace: "&source;"
}

.tronly {
  display:none;
}

@techreport .tronly {
  display:block;
}

@submit .supplement {
  replace: clear;
  replace: "&source; in the tech report"
}

.intro1 {
  display: none;
}

[INCLUDE=borrowing-style]
[INCLUDE=koka-style]
[INCLUDE=graphdefs]
[INCLUDE=graphlegend]


~ HtmlOnly
[TITLE]
~

~ begin abstract
These are the lecture notes for Frank Pfenning's course at OPLSS 2024.
~ end abstract

~TexRaw
\author{Nicholas Coltharp}
\author{Anton Lorenzen}
\author{Wesley Nuzzo}
\author{Xiaotian Zhou}

\title{\mdtitle}
\maketitle
\def\shorttitle{\acmshorttitle}
~

~ tronly
~~ texraw
\makeatletter
\fancypagestyle{firstpagestyle}{%
  \fancyhf{}%
  \fancyfoot[C]{\small\thepage}%
}
\fancypagestyle{standardpagestyle}{%
  \fancyhf{}%
  \fancyfoot[C]{\small\thepage}%
}
\makeatother
\pagestyle{standardpagestyle}
~~
~

~ MathDefs
\newcommand{\gray}[1]{\colorbox{gainsboro}{\strut$#1$}}
\newcommand{\tr}[1]{\lfloor #1\rfloor}
\newcommand{\comm}{\mathbin{\triangleright}}

\newcommand\under[2]{\underset{\raisebox{2mm}{$\scriptstyle #2$}}{#1}}
\newcommand\inhx[2]{\under{#1}{\under{\uparrow}{#2}}}
\newcommand\synx[2]{\under{#1}{\under{\downarrow}{#2}}}
\newcommand\inh[1]{\under{#1}{\uparrow}}
\newcommand\syn[1]{\under{#1}{\downarrow}}
\newcommand\smallsquare{\mathbin{\vcenter{\hbox{\scalebox{0.7}{$\square$}}}}}
\newcommand\smallat{{\mkern 1mu\vcenter{\hbox{\scalebox{0.7}{@}}}\mkern-1mu}}
\newcommand{\up}[1]{\lceil #1\rceil}
~

&bignegskip;

&bignegskip;

&bignegskip;

# Lecture 1: Linear Functional Programming

Linear logic: 1987 or earlier.
Relevance has been known for a while, but implementation takes a while.
But see, eg, Rust: things are changing.

## SNAX

In this course, we use the SNAX programming language (its name derives from proof theory). It has the following features:

- Substructural programming (linear + non-linear)
- Inference
- Overloading (between linear/non-linear versions)
- Intermediate language also based in proof theory: it is a proof-theoretic compiler
- pretty decent performance comparable to MLTon

## Types

~ begin columns 
~ begin column { width:50%; }

~ infer
\quad
------------
() : 1
~

~ infer
e : A
-----------------
@inl e : A + B
~

~ infer
e : B
-----------------
@inr e : A + B
~


~ end column
~ begin column

~ infer
\quad
------------
() @value
~

~ infer
v @value
---------------
@inl v @value
~

~ infer
v @value
-------------------------
@inr v @value
~

~ end column
~ end columns

And we define

~ mathpre
2 = 1 + 1
@true = @inl ()
@false = @inr ()
~

### Sum Types

But in fact, we'll use _labels_: $+\{l : A_l\}$ for $L != 00$, finite
($L$ has to be non-empty due to implementation issues).

~ mathpre
A + B = +\{@inl : A, @inr : B\}
~

~ mathpre
@bool = +\{@true : 1, @false : 1\}
@true () : @bool
@false () : @bool
~

### Equireqursive Types

We can form the natural numbers using an equirecursive (_not_ isorecursive) approach.

~ mathpre
@nat = +\{@zero : 1, @succ : @nat\}
\up{0} = @zero ()
\up{1} = @succ (@zero ())
\up{2} = @succ (@succ (@zero ()))
~

~ begin columns 
~ begin column { width:50%; }

~ infer
(K \in L) \quad e : A_l
------------
K(e) : +\{ l : A_l \}_{l \in L}
~

~ end column
~ begin column

~ infer
v @value
------------
K(v) @value
~

~ end column
~ end columns

~ mathpre
@list = +\{ @nil : 1, @cons : @nat \times @list \}
~

### Pairs

&nbsp;

~ begin columns 
~ begin column { width:50%; }

~ infer
e1 : A \quad e2 : B
------------
(e1, e2) : A \times B
~

~ end column
~ begin column

~ infer
v1 @value \quad v2 @value
------------
(v1, v2) @value
~

~ end column
~ end columns

### Computation

Barely, we are not introducing function types.

```
not (x : bool)
not x = match x with
  | true a => false a
  | false a => true a
```

Note: It would _not_ be legal to use `()` instead of `a` on the right-hand side!
That would not be _linear_.

### Match construct

&nbsp;

~ infer
e : +\{ l : A_l \}_{l \in L} \quad x : A_l |- e_l : C (\forall l \in L)
------------
@match e @with (l(x) => e_l)_{l \in L} : C
~

For pairs, we need to use a different approach to avoid re-using variables:

~ begin columns 
~ begin column { width:50%; }

~ infer
G |- e1 : A \quad D |- e2 : B
------------
G,D |- (e1, e2) : A \times B
~

~ end column
~ begin column

~ infer
\quad
------------
x : A |- x : A
~

~ end column
~ end columns

We can only apply this rule if `x` is the only variable in the context.  Otherwise, there could be unused variables.

Note: variables must be unique in a context.

~ infer
D |- e : A \times B \quad G, x : A, y : B |- e' : C
------------
D,G |- @match e @with (x,y) => e' : C
~

How to implement? The obvious solution is to just check the preconditions and
make sure that they partition the variables.  However, this does not perform
well.  Better approaches will be covered in the next lecture.

<!-- We could instead use a *subtractive* approach. -->
<!-- 1. Typecheck the expression in question, yielding a set of used variables `A`. -->
<!-- 2. Typecheck the left precondition, yielding a new set of used variables `B`. -->
<!-- 3. Subtract `B` from `A` and typecheck the right precondition, ensuring that it uses all remaining variables. -->

<!-- In practice, Snax uses an *additive* approach. -->
<!-- 1. Typecheck left precondition, yielding a set of used variables `A`. -->
<!-- 2. Typecheck the right precondition, yielding a set of used variables `B`. -->
<!-- 3. Typecheck the expression in question, ensuring that it uses all the variables from `A` and `B` exactly once. -->

Back to the type rules for other types:

~ infer
\quad
------------
|- () : 1
~

We need to use the empty context, since this term consumes no variables.

~ infer
D |- e : +\{ l : A_l \}_{l \in L} \quad G, x : A_l |- e_l : C (\forall l \in L)
------------
D,G |- @match e @with (l(x) => e_l)_{l \in L} : C
~

Note that every branch of the match must have the same context $G$.  This is just to say that every branch must use the same set of variables.

```
plus (x : nat) (y : nat) : nat
plus x y = match x with
  | zero () => y
  | succ x' => succ (plus x' y)
```

Note that in the first arm, a pattern like `zero u` would not work, since `u` would be unused.
