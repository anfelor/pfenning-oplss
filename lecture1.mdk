[INCLUDE=style/acmart]

Extended    : False

Anon        : False
TechReport  : True
Logo        : False
Submit      : False
Todo        : True
Tight       : False

Title       : Frank Pfenning: Adjoint Functional Programming
TechNR      :

Short Title : &Title;

Author      : Anton Lorenzen
Affiliation : School of Informatics, University of Edinburgh, UK
Email       : anton.lorenzen@ed.ac.uk

Keywords    : FIP, FBIP, Perceus, Reference Counting, Lean

ISBN            :
DOI             :

Acm Copyright   : rightsretained
Acm Copyright   : none
Acm Journal     : PACMPL
Acm Number      : OOPSLA
Acm Article     : 40
Acm Month       : 1
Acm Volume      : 7
Acm Format      : acmsmall,screen
@anon Acm Format: acmsmall,review,anonymous,nonacm
Acm SubmissionID: popl23main-p271-p
Acm Received    : 2022-07-07
Acm Received Accepted: 2022-11-07

Bibliography    : daan2022.bib
Math Dpi        : 300
Math Concurrency: 8
xPackage         : trfrac
Package         : graphicx
Embed           : 1000

Tex Header:
    \usepackage{pdflscape}


prelinecorrection: [\setlength\preadjust{0.1em}]{input:texraw}

.supplement {
  replace: "&source;"
}

.tronly {
  display:none;
}

@techreport .tronly {
  display:block;
}

@submit .supplement {
  replace: clear;
  replace: "&source; in the tech report"
}

.intro1 {
  display: none;
}

[INCLUDE=borrowing-style]
[INCLUDE=koka-style]
[INCLUDE=graphdefs]
[INCLUDE=graphlegend]


~ HtmlOnly
[TITLE]

[TOC]
~

~TexRaw
\author{Anton Lorenzen}
\affiliation{
  \institution{University of Edinburgh}
  \city{Edinburgh}
  \country{UK}
}
\email{anton.lorenzen@ed.ac.uk}

\title{\mdtitle}
\maketitle
\def\shorttitle{\acmshorttitle}
~

~ tronly
~~ texraw
\makeatletter
\fancypagestyle{firstpagestyle}{%
  \fancyhf{}%
  \fancyfoot[C]{\small\thepage}%
}
\fancypagestyle{standardpagestyle}{%
  \fancyhf{}%
  \fancyfoot[C]{\small\thepage}%
}
\makeatother
\pagestyle{standardpagestyle}
~~
~

~ MathDefs
\newcommand{\gray}[1]{\colorbox{gainsboro}{\strut$#1$}}
\newcommand{\tr}[1]{\lfloor #1\rfloor}
\newcommand{\comm}{\mathbin{\triangleright}}

\newcommand\under[2]{\underset{\raisebox{2mm}{$\scriptstyle #2$}}{#1}}
\newcommand\inhx[2]{\under{#1}{\under{\uparrow}{#2}}}
\newcommand\synx[2]{\under{#1}{\under{\downarrow}{#2}}}
\newcommand\inh[1]{\under{#1}{\uparrow}}
\newcommand\syn[1]{\under{#1}{\downarrow}}
\newcommand\smallsquare{\mathbin{\vcenter{\hbox{\scalebox{0.7}{$\square$}}}}}
\newcommand\smallat{{\mkern 1mu\vcenter{\hbox{\scalebox{0.7}{@}}}\mkern-1mu}}
\newcommand{\up}[1]{\lceil #1\rceil}
~

&bignegskip;

# Lecture 1: Linear Functional Programming

## SNAX

## Types

~ begin columns 
~ begin column { width:50%; }

~ infer
\quad
------------
() : 1
~

~ infer
e : A
-----------------
@inl e : A + B
~

~ infer
e : B
-----------------
@inr e : A + B
~


~ end column
~ begin column

~ infer
\quad
------------
() @value
~

~ infer
v @value
---------------
@inl v @value
~

~ infer
v @value
-------------------------
@inr v @value
~

~ end column
~ end columns

And we define

~ mathpre
2 = 1 + 1
@true = @inl ()
@false = @inr ()
~

### Sum Types

But in fact, we'll use _labels_: $+\{l : A_l\}$ for $L != 00$, finite
($L$ has to be non-empty due to implementation issues).

~ mathpre
A + B = +\{@inl : A, @inr : B\}
~

~ mathpre
@bool = +\{@true : 1, @false : 1\}
@true () : @bool
@false () : @bool
~

### Equireqursive Types

We can form the natural numbers using an equirecursive (_not_ isorecursive) approach.

~ mathpre
@nat = +\{@zero : 1, @succ : @nat\}
\up{0} = @zero ()
\up{1} = @succ (@zero ())
\up{2} = @succ (@succ (@zero ()))
~

~ begin columns 
~ begin column { width:50%; }

~ infer
(K \in L) \quad e : A_l
------------
K(e) : +\{ l : A_l \}_{l \in L}
~

~ end column
~ begin column

~ infer
v @value
------------
K(v) @value
~

~ end column
~ end columns

~ mathpre
@list = +\{ @nil : 1, @cons : @nat \times @list \}
~

### Pairs

~ begin columns 
~ begin column { width:50%; }

~ infer
e1 : A \quad e2 : B
------------
(e1, e2) : A \times B
~

~ end column
~ begin column

~ infer
v1 @value \quad v2 @value
------------
(v1, v2) @value
~

~ end column
~ end columns

### Computation

Barely, we are not introducing function types.

```
not (x : bool)
not x = match x with
  | true a => false a
  | false a => true a
```

Note: It would _not_ be legal to use `()` instead of `a` on the right-hand side!
That would not be _linear_.

### Match construct

&nbsp;

~ infer
e : +\{ l : A_l \}_{l \in L} \quad x : A_l |- e_l : C (\forall l \in L)
------------
@match e @with (l(x) => e_l)_{l \in L} : C
~

For pairs, we need to use a different approach to avoid re-using variables:

~ begin columns 
~ begin column { width:70%; }

~ infer
G |- e1 : A \quad D |- e2 : B
------------
G,D |- (e1, e2) : A \times B
~

~ end column
~ begin column

~ infer
\quad
------------
x : A |- x : A
~

~ end column
~ end columns

Note: variables must be unique in a context.

~ infer
D |- e : A \times B \quad G, x : A, y : B |- e' : C
------------
D,G |- @match e @with (x,y) => e' : C
~

How to implement? The obvious solution is to just check the
preconditions and make sure that they partition the variables.

Back to the type rules for other types:

~ infer
\quad
------------
|- () : 1
~

We need to use the empty context, since this term consumes no variables.

~ infer
D |- e : +\{ l : A_l \}_{l \in L} \quad G, x : A_l |- e_l : C (\forall l \in L)
------------
D,G |- @match e @with (l(x) => e_l)_{l \in L} : C
~

Why is it okay to re-use $G$? TODO

```
plus (x : nat) (y : nat) : nat
plus x y = match x with
  | zero () => y
  | succ x' => succ (plus x' y)
```